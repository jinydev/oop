I"
<h1 id="의존체-주입">의존체 주입</h1>
<p>의존체 주입(dependency injection)은 객체지향 코드에서 흔히 볼 수 있습니다.</p>

<p>약자로 DI라고 표현 하기도 합니다. 의존성 주입은 디자인 패턴 설계에서 많이 사용을 합니다.</p>

<p>의존성 주입은 객체지향 코드에서 객체간의 의존성을 줄여
<code class="language-html highlighter-rouge">느슨한 결합</code>을 할 수 있습니다.</p>

<p>2004년 마틴 파울러(Martin Fowler)는 제어의 역전 커테이너와 의존체 주입패턴을 설명</p>

<h2 id="역제어">역제어</h2>
<p>의존체 주입은 제어를 꺼꾸로 뒤집는 것입니다.</p>

<p><code class="language-html highlighter-rouge">new</code> 키워드를 통하여 객체의 생성은 밀접한 의존 관계를 형성하게 됩니다.</p>

<p>생성한 리소스를 필요한 객체에게 직접 전달해 주는 것입니다.</p>

<ul>
  <li>설계 용이성</li>
  <li>쉬운 테스트</li>
  <li>느슨한 결합</li>
</ul>

<p>의존성 주입은 실제 객체의 생성을 분리하여 다른 곳에서 인스턴스를 생성합니다. 생성된 인스턴스는 필요 시점에 필요한 객체에 전달합니다.</p>

<h2 id="ioc">IOC</h2>
<p>제어의 역전(Inversion of controll)은 객체의 연결 개념입니다.</p>

<p>의존성은 미리 필요한 대상과 시점을 선정하여 인스턴스를 전달합니다.</p>

<h2 id="di-구현">DI 구현</h2>
<p>DI를 구현할때에는 자기 자신이 작업을 해야 되는 클래스의 내용과 외부로 부터 사용될 의존체를 구분하는 것입니다.</p>

<p>즉, DI는 객체의 생성 부분과 사용부분을 분리하는 것입니다.</p>

<p>비지니스 처리 로직에 객체를 생성하는 로직을 넣지 않습니다.</p>

<h2 id="의존성과-패턴">의존성과 패턴</h2>
<p>의존성 주입을 적용한 디자인 패턴들은 많이 있습니다.</p>

<p>장식자 패턴 - 런타임으로 새로운 동적 기능을 추가할 수 있습니다.</p>

<p>팩토리 패턴 - new 키워드 대신에 객체의 생성을 처리합니다.</p>

<p>옵저버 패턴 - 객체의 호출하는 코드와 호출받는 코드의 순서를 변경합니다. 이벤트 처리에 적합 합니다.</p>

<h2 id="정리">정리</h2>
<p>의존체 주입은 기존의 객체들의 강력한 결합을 느슨한 결합으로 변경할 수 있습니다.</p>

<p>또한 객체의 생성부분을 분리하여, 비지니스 로직에만 집중을 하여 코드를 작성할 수 있습니다.</p>

:ET