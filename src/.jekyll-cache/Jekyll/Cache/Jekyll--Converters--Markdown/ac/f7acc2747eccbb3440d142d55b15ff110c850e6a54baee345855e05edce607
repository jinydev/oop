I"J.<h3 id="클래스-관계">클래스 관계</h3>
<hr />

<p>클래스의 인스턴스 객체 사이에는 관계가 형성되어 있습니다.</p>

<p>객체지향에서 한개의 클래스 하나만으로는 의미가 없습니다. 객체지향적인 코드를 작성하기 위해서는 객체간의 관계가 있어야 합니다.</p>

<p>상대객체와 주체가 필요로 합니다.</p>

<p>하나의 객체가 또다른 객체를 호출을 통하여 관계를 형성하게 됩니다.</p>

<p>크게 두개의 관계가 있습니다. 종속(dependency) 과 연관(association) 입니다.</p>

<p>클래스 사이에는 관계가 존재하게 됩니다.
관계란 객체사이의 연결을 의미합니다.</p>

<p>관계는 크게 4개로 구성이됩니다.</p>
<ul>
  <li>종속(depenecy) 관계</li>
  <li>연관(association) 관계</li>
  <li>일반화(generalization) 관계</li>
  <li>실현(realization) 관계</li>
</ul>

<p>관계는 UML로 점선, 실선으로 표시합니다. 또한 화살표의 모양으로 구분합니다.</p>

<h3 id="종속depenecy-관계">종속(depenecy) 관계</h3>
<hr />
<p>객체가 변경이 되면 이를 사용하는 다른 객체에도 영향을 받게되는 관계를 종속 관계라고 합니다.</p>

<p>매서드의 매개변수로 다른 클래스의 인스턴스를 받을 때, 종속 관계가 발생되게 됩니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code>
<span class="k">public</span> <span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nv">$Bar</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$bar</span><span class="o">-&gt;</span><span class="na">process</span><span class="p">();</span>
    <span class="nb">unset</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>또는 매서드 내부에서 인스턴스를 생성하고, 사용하는 경우에 종속 관계가 형성이 됩니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="k">public</span> <span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$bar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">;</span>
    <span class="nv">$bar</span><span class="o">-&gt;</span><span class="na">process</span><span class="p">();</span>
    <span class="nb">unset</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>foo와 bar 사이에는 종속 관계가 있다라고 할 수 있습니다.</p>

<h3 id="연관association-관계">연관(association) 관계</h3>
<hr />
<p>객체사이의 구조적인 관계 표현입니다.</p>

<p>연관 관계를 코드에서 표현할때는 프로퍼티가 외부의 다른 클래스의 인스턴스를 가지고 있는 경우에 말합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">class</span> <span class="nc">foo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$obj</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위의 처림 외부에서 매개변수로 전달되는 인스턴스를 내부 프로퍼티로 저장을 합니다.</p>

<h3 id="연관관계-방향">연관관계 방향</h3>

<p>연관 관계에는 방향성이 있습니다. 위의 코드는 <code class="language-html highlighter-rouge">단방향성</code>에 대한 예제 입니다.
단방향성은 UML에서 방향에 따라 화살표가 표기가 됩니다.</p>

<p><code class="language-html highlighter-rouge">양방향성</code>은 두개의 객체가 서로 접근을 할 수 있도록 인스턴스를 가지고 있는 것입니다.
양방향성을 UML로 표기할때는 화살표가 없거나, 양쪽에 다 화살표가 있는 모양으로 표현합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code>
<span class="kd">class</span> <span class="nc">foo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$obj</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">change</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">bar</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$obj</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span> <span class="o">=</span> <span class="nv">$foo</span><span class="p">;</span>
            <span class="c1">// 양방향으로 메소드를 호출하여 설정을 합니다.</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span><span class="o">-&gt;</span><span class="na">change</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="연관관계-다수성">연관관계 다수성</h3>
<p>연관관계에서 방향성 이외에도 <code class="language-html highlighter-rouge">다수성</code>이라는 것이 있습니다. 다수성은 연관 관계를 가지고 있는 인스턴스의 수를 표현합니다.</p>

<ul>
  <li>0 없음</li>
  <li>1 하나</li>
  <li>
    <ul>
      <li>많음</li>
    </ul>
  </li>
  <li>0..1 하나 또는 없음</li>
  <li>0..* 0개 이상</li>
  <li>1..* 1개 이상</li>
  <li>m..n m부터 n까지</li>
</ul>

<p>여러개의 다수의 인스턴스 관계를 가질때는 배열을 이용합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">class</span> <span class="nc">foo</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$obj</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span><span class="p">,</span> <span class="nv">$bar</span><span class="p">);</span>   
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="집합aggregation-연관관계">집합(aggregation) 연관관계</h3>
<hr />
<p>전체와 부분관계를 말합니다.</p>

<p>집합 연관관계를 저장할때는, 배열을 이용하여 다수의 집합을 저장합니다.</p>

<h3 id="복합composition-연관관계">복합(composition) 연관관계</h3>
<hr />
<p>전체가 부분을 확고하게 소유하고 있는 집합 관계를 말합니다.
따라서 부분을 포함하고 있는 객체가 삭제가 되면, 소속된 부분 객체 또한 자동으로 삭제됩니다.</p>

<p>전체 객체를 복사를 할때, 소속된 부속 객체도 같이 복사하게 됩니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">class</span> <span class="nc">foo</span>
<span class="p">{</span>

<span class="p">}</span>

<span class="kd">class</span> <span class="nc">bar</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$foo</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="nv">$foo</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 복합 연관관계 인스턴스 생성</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">foo</span><span class="p">;</span>
        <span class="p">}</span>       
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">change</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="nv">$foo</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-html highlighter-rouge">bar</code> 객체가 생성될때 필요한 부속 <code class="language-html highlighter-rouge">foo</code>도 자동적으로 생성되게 됩니다.
PHP는 복합관계 설정으로 프로퍼티 변수로 사용을 합니다. 생성 및 메서드를 통하여 수정을 할 수도 있습니다.</p>

<p>집합 연관관계와 복합 연관관계는 서로 비슷한 점이 많이 있습니다. 이 두 연관관계의 차이점은 느슨한 결합과 강한 결합의 차이 입니다.
집합 관계는 느슨한 관계로 생성시 바로 부분 관계를 즉시 생성하지 않아도 됩니다. 별도의 메소드를 추가하여 생성후에 관계를 설정할 수 있습니다.
하지만 복합 관계는 강력한 결합 관계로 생성시 부분관계도 같이 생성되는 것이 차이점이 있습니다.</p>

<h3 id="객체의-연동">객체의 연동</h3>
<hr />
<p>한개의 클래스가 단독으로 동작을 할 수 있습니다. 하지만, 대부분의 객체지향 코드 들은 여러개의 객체가 연동되어 동작을 하게 됩니다.</p>

<p>상속속(inheritance)과 연관(association)은 는 객체를 구조화 합니다.</p>

:ET