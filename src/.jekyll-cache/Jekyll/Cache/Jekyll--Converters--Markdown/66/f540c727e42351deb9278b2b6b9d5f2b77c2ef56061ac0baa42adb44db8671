I"2
<h1 id="컴포넌트">컴포넌트</h1>
<p>프로그램언어에서 컴포넌트라는 단어를 많이 들어 보았습니다. 여러가지의 의미가 존재합니다.</p>

<p>객체지향에서 컴포넌트의 의미는 재사용을 말합니다.</p>

<p>재사용 가능한 컴포넌트는  공학적으로 교체할 수 있는 부품과 같다.</p>

<p>시스템에 독립적이면서 교체가 나능한 부품인 것입니다.</p>

<p>교체</p>

<p>컴포넌트는 동적으로 바인딩 되는 모듈 입니다.</p>

<p>구현된 코드를 동적으로 바인딩 하며, 도적이란 런타임에 동작을 하는 것이다.</p>

<p>컴포넌트는 하나 이상의 클래스들이 모여서 구성을 합니다.</p>

<h2 id="비지니스-로직">비지니스 로직</h2>
<p>컴포넌트는 비지니스 객체 또는 로직을 구현한 것</p>

<p>하나의 컴포넌트는 독립적인 업무 단위</p>

<p>이러한 단위로 개발이 이루어 져야 재사용이 편리하다.</p>

<h2 id="특성">특성</h2>
<p>컴포넌트의 코드는 100% 구현되어 있어야 한다.</p>

<p>스팩과 표준을 가진다.</p>

<p>패키징하며, 독립적 배포가 가능하다.</p>

<h3 id="완성된-부품">완성된 부품</h3>
<p>컴포넌트는 완성된 부품이다. 따라서, 100% 구현이 되어 있어야 한다.</p>

<h3 id="스팩">스팩</h3>
<p>컴포넌트는 명세서와 같습니다. 따라서 스펙이 제공됩니다.</p>

<p>컴포넌트에 대한 인터페이스, 플렛폼등의 설명이 같이 필요하다.</p>

<h3 id="표준">표준</h3>
<p>컴포넌트는 표준에 맞게 개발이 되어야 한다.</p>

<p>스팩이 정해지지 않은 상태에서 개발은 어렵다.</p>

<h3 id="패키징">패키징</h3>
<p>컴포넌트는 독립적 배포를 위해서 패키지 형태로 제공을 합니다.</p>

<p>컴포넌트 자체가 재사용의 단위 입니다.</p>

<h3 id="독립적-배포">독립적 배포</h3>

<p>독립적 배포와 설치, 조립이 가능해야 한다.</p>

<h2 id="표기법">표기법</h2>
<p>컴포넌트의 설계는 
컴포넌트와 인터페이스로 구성됩니다.</p>

<p>내부 설계는 하나 이상으 클래스들의 관계 구조를 설계하는 것</p>

<p>그리고 이러한 컴포넌트의 사용이 인터페이스로 외부로 제공을 합니다.</p>

<p>컴포넌트는 내부적으로 복합구조로 되어 있습니다. 클래스들의 기능적인 관계를 설정하고 호출을 하게 됩니다.</p>

<h2 id="구현">구현</h2>
<p>컴포넌트는 일반 클래스 형태로 구현이 가능합니다.</p>

:ET